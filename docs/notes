- repository structure
  steamlink/steamlink -> pypi package
  steamlink/steamlink-arduino	-> arduino library w/ samples

- to make a new release on pypi
	cd ~/git/steamlink
	vi steamlink/const.py   edit *_VERSION
	git commit -a -m "version 0.7.1"
	git push
	git tag 0.7.1 -m "0.7.1"	
	git push --tags origin master

	. ~/sl/bin/activate
	
	python3 setup.py sdist upload -r pypi

- to find all debug key tags run
	 grep in\ logging.DBGK steamlink/*.py | sed "s/.*if '\(.*\)' in logging.*/\1/" | sort -u
	
## TODOs:

- HTTP route:
	- '/config'

- Security
	- Default:
		- run on localhost without password
- Configurable via GUI:
	- Working directory
	- MQTT broker selection
		- default: we'll fire up our own
			- customize local broker
		- options: configure an external broker


## Working directory

The working directory by default is: `~/.steamlink/steamlink.cache`

## Node States

These are the node states as implemented in steamlink.py

1. INITIAL

AKA UNKNOWN. This means the backend has not heard from the node since the backend started. All data from the node is retreived from the cache.

2. UP

We have received a sign on (op code `ON`) packet from the node. If a node keeps sending data the state stays at UP indefinitely. 

3. OVERDUE

A heartbeat process is run periodically to check which nodes are overdue. If data is missed up to the `max_silence` time as defined in the node configuration the state goes to `OVERDUE`. If a node is overdue to send data and the node is pingable (defined in the node configuration), the store sends a get status request (op code `GS`) 

4. <NODE STATUS> 

If a node sends a set status (op code `SS`) this status will be set. A node should be able to respond to a `GS` op code, and the steamlink client Arduino library defaults to an `SS` message of "OK" when it receives a `GS`.

Suggested reponses to `GS`:
	- "OFFLINE": If the node powers off
	- "SLEEPING": If the node enters low power mode
TODO: This is not implemented in the client libraries by default.

5. TRANSMITTING

The sign on packet for the node was not seen by the backend but the node appears to be transmitting normaly.



